name: Release
on:
  release: 
    types: [published]

jobs:
  dependencies:
    name: cargo build --dependencies
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          # - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macOS-latest
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   name: tab-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - id: cargo-cache
        name: Setup | Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}          
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-release-
            ${{ runner.os }}-cargo-

      - name: Setup | musl tools
        if: steps.cargo-cache.outputs.cache-hit != 'true' && matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt install -y musl-tools

      - name: Build | Dependencies
        if: steps.cargo-cache.outputs.cache-hit != 'true' 
        run: cargo build --release --bin tab --target ${{ matrix.target }}

      - name: Build | Dev Dependencies
        if: steps.cargo-cache.outputs.cache-hit != 'true' 
        run: cargo test --release --target ${{ matrix.target }} --no-run

  binaries:
    name: cargo build --bin tab
    needs: dependencies
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          # - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: tab-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: tab-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: tab-x86_64-apple-darwin.tar.gz
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   name: tab-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v2

      - name: Setup | Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}          
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-release-
            ${{ runner.os }}-cargo-

      - name: Setup | musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt install -y musl-tools

      - name: Build | Integration Tests
        run: cargo test --release --target ${{ matrix.target }} -- --nocapture

      - name: Build | Build
        run: cargo build --release --bin tab --target ${{ matrix.target }}

      # - name: Post Setup | Prepare artifacts [Windows]
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     cd target/${{ matrix.target }}/release
      #     strip tab.exe
      #     7z a ../../../${{ matrix.name }} tab.exe
      #     cd -

      - name: Post Setup | Prepare artifacts [-nix]
        # if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          strip tab
          tar czvf ../../../${{ matrix.name }} tab
          cd -

      # - name: Post Setup | Prepare checksums [Windows]
      #   if: matrix.os == 'windows-latest'
      #   run: Get-FileHash "${{ matrix.name }}" | Format-List > "${{ matrix.name }}.sha256"

      - name: Post Setup | Prepare checksums [-nix]
        # if: matrix.os != 'windows-latest'
        run: openssl dgst -sha256 -r "${{ matrix.name }}" | awk '{print $1}' > "${{ matrix.name }}.sha256"

      - name: Post Setup | Upload artifacts
        uses: AButler/upload-release-assets@v2.0
        with:
          files: '${{ matrix.name }}*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  crates_io:
    name: crates.io publish
    needs: binaries
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: cargo publish
        run: cargo publish --manifest-path ./tab/Cargo.toml --token ${{ secrets.CRATES_IO_TOKEN }}

  # update_brew_formula:
  #   name: homebrew publish
  #   needs: checksums
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: mislav/bump-homebrew-formula-action@v1.6
  #       with:
  #         formula-name: tab
  #       env:
  #         COMMITTER_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}